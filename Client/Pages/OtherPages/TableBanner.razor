
<div class="container-fluid">
    <div class="row">
        <div class="col-lg-2 cursorStyle">
            <div class=" card border-primary bg-success">
                <div class="card-header text-white"><i class="bi bi-people text-white"></i> Consultants
                    <span class="badge bg-primary fs-6">@Consultants.Count</span>
                </div>
            </div>
        </div>
        <div class="col-lg-2 cursorStyle">
            <div class=" card border-success bg-primary text-white" @onclick="VacationClicked">
                <div class="card-header"><i class="bi bi-backpack3 text-white"></i> Vacation
                    <span class="badge bg-success fs-6"> @Vacations.Count</span>
                </div>
            </div>
        </div>
        <div class="col-lg-2 cursorStyle" @onclick="OvertimeClicked">
            <div class=" card border-danger bg-info text-white">
                <div class="card-header"><i class="bi bi-stopwatch text-white"></i> Overtime
                    <span class="badge bg-danger fs-6"> @Overtimes.Count</span>
                </div>
            </div>
        </div>
        <div class="col-lg-2 cursorStyle">
            <div class=" card border-info bg-danger text-white" @onclick="SanctionClicked">
                <div class="card-header">
                    <i class="bi bi-x-octagon text-white"></i> Sanctions
                    <span class="badge bg-info fs-6"> @Sanctions.Count</span>
                </div>
            </div>
        </div>
        <div class="col-lg-2 cursorStyle">
            <div class=" card border-dark bg-warning">
                <div class="card-header"><i class="bi bi-slack text-dark"></i> Departments
                    <span class="badge bg-dark fs-6"> @Departments.Count</span>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>

@code {

    public List<Consultant> Consultants { get; set; } = new();
    public List<Department> Departments { get; set; } = new();
    public List<Overtime> Overtimes { get; set; } = new();
    public List<Sanction> Sanctions { get; set; } = new();
    public List<Vacation> Vacations { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        allState.Action += StateHasChanged;
        await LoadDefaults();
    }

    async Task LoadDefaults()
    {
        Consultants = await consultantService.GetAll(Constants.ConsultantBaseUrl);
        Departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        Overtimes = await overtimeService.GetAll(Constants.OvertimeBaseUrl);
        Sanctions = await sanctionService.GetAll(Constants.SanctionBaseUrl);
        Vacations = await vacationService.GetAll(Constants.VacationBaseUrl);
    }

    void OvertimeClicked() => allState.OvertimeClicked();
    void SanctionClicked() => allState.SanctionClicked();
    void VacationClicked() => allState.VacationClicked();

    public void Dispose() => allState.Action -= StateHasChanged;
}